


_HTMLElement

Properties
DOMString	accessKey
DOMString	accessKeyLabel
boolean?
commandChecked
The commandChecked attribute must return true if the command's Checked State is that the command is checked, and false if it is that the command is not checked. If the element does not define a command, the attribute must return null.
boolean?
commandDisabled
The commandDisabled attribute must return true if the command's Disabled State is that the command is disabled, and false if the command is not disabled. This attribute is not affected by the command's Hidden State. If the element does not define a command, the attribute must return null.
boolean?
commandHidden
The commandHidden attribute must return true if the command's Hidden State is that the command is hidden, and false if the command is not hidden. If the element does not define a command, the attribute must return null.
DOMString?
commandIcon
The commandIcon attribute must return the absolute URL of the command's Icon. If the element does not specify an icon, or if the element does not define a command, then the attribute must return null.
DOMString?
commandLabel
The commandLabel attribute must return the command's Label, or null if the element does not define a command or does not specify a Label.
DOMString?
commandType
The commandType attribute must return a string whose value is either "command", "radio", or "checkbox", depending on whether the Type of the command defined by the element is "command", "radio", or "checkbox" respectively. If the element does not define a command, it must return null.
DOMString	contentEditable
HTMLMenuElement?
contextMenu
The contextMenu IDL attribute must reflect the contextmenu content attribute.
DOMStringMap
dataset
The dataset IDL attribute provides convenient accessors for all the data-* attributes on an element.
DOMString
dir
The dir IDL attribute on an element must reflect the dir content attribute of that element, limited to only known values.
boolean	draggable
DOMSettableTokenList	dropzone
boolean	hidden
boolean	isContentEditable
DOMString	itemId
DOMSettableTokenList	itemProp
DOMSettableTokenList	itemRef
boolean	itemScope
DOMSettableTokenList	itemType
any	itemValue
DOMString
lang
The lang IDL attribute must reflect the lang content attribute in no namespace.
EventHandler	onabort
EventHandler	onautocomplete
EventHandler	onautocompleteerror
EventHandler	onblur
EventHandler	oncancel
EventHandler	oncanplay
EventHandler	oncanplaythrough
EventHandler	onchange
EventHandler	onclick
EventHandler	onclose
EventHandler	oncontextmenu
EventHandler	oncuechange
EventHandler	ondblclick
EventHandler	ondrag
EventHandler	ondragend
EventHandler	ondragenter
EventHandler	ondragexit
EventHandler	ondragleave
EventHandler	ondragover
EventHandler	ondragstart
EventHandler	ondrop
EventHandler	ondurationchange
EventHandler	onemptied
EventHandler	onended
OnErrorEventHandler	onerror
EventHandler	onfocus
EventHandler	oninput
EventHandler	oninvalid
EventHandler	onkeydown
EventHandler	onkeypress
EventHandler	onkeyup
EventHandler	onload
EventHandler	onloadeddata
EventHandler	onloadedmetadata
EventHandler	onloadstart
EventHandler	onmousedown
EventHandler	onmouseenter
EventHandler	onmouseleave
EventHandler	onmousemove
EventHandler	onmouseout
EventHandler	onmouseover
EventHandler	onmouseup
EventHandler	onmousewheel
EventHandler	onpause
EventHandler	onplay
EventHandler	onplaying
EventHandler	onprogress
EventHandler	onratechange
EventHandler	onreset
EventHandler	onresize
EventHandler	onscroll
EventHandler	onseeked
EventHandler	onseeking
EventHandler	onselect
EventHandler	onshow
EventHandler	onsort
EventHandler	onstalled
EventHandler	onsubmit
EventHandler	onsuspend
EventHandler	ontimeupdate
EventHandler	ontoggle
EventHandler	onvolumechange
EventHandler	onwaiting
HTMLPropertiesCollection	properties
boolean	spellcheck
CSSStyleDeclaration	style
long	tabIndex
DOMString
title
The title IDL attribute must reflect the title content attribute.
boolean
translate
The translate IDL attribute must, on getting, return true if the element's translation mode is translate-enabled, and false otherwise. On setting, it must set the content attribute's value to "yes" if the new value is true, and set the content attribute's value to "no" otherwise.
Operations
void	blur()
void	click()
void	focus()
void	forceSpellCheck()





_HTMLEmbedElement


Properties
DOMString
height
The width and height IDL attributes on the iframe, embed, object, and video elements must reflect the respective content attributes of the same name.
DOMString
src
The IDL attributes src and type each must reflect the respective content attributes of the same name.
DOMString
type
The IDL attributes src and type each must reflect the respective content attributes of the same name.
DOMString
width
The width and height IDL attributes on the iframe, embed, object, and video elements must reflect the respective content attributes of the same name.
Operations
any
legacycaller(any arguments...)
The HTMLEmbedElement object representing the element must expose the scriptable interface of the plugin instantiated for the embed element, if any. At a minimum, this interface must implement the legacy caller operation. (It is suggested that the default behavior of this legacy caller operation, e.g.








_HTMLFieldSetElement

Properties
boolean
disabled
The disabled IDL attribute must reflect the content attribute of the same name.
HTMLFormControlsCollection
elements
The elements IDL attribute must return an HTMLFormControlsCollection rooted at the fieldset element, whose filter matches listed elements.
HTMLFormElement?
form
Reassociateable form-associated elements have a form IDL attribute, which, on getting, must return the element's form owner, or null if there isn't one.
DOMString
name
The name IDL attribute must reflect the name content attribute.
DOMString
type
The type IDL attribute must return the string "fieldset".
DOMString
validationMessage
The validationMessage attribute must return the empty string if the element is not a candidate for constraint validation or if it is one but it satisfies its constraints; otherwise, it must return a suitably localized message that the user agent would show the user if this were the only form control with a validity constraint problem.
ValidityState
validity
The validity attribute must return a ValidityState object that represents the validity states of the element. This object is live, and the same object must be returned each time the element's validity attribute is retrieved.
boolean
willValidate
The willValidate attribute must return true if an element is a candidate for constraint validation, and false otherwise (i.e. false if any conditions are barring it from constraint validation).
Operations
boolean
checkValidity()
When the checkValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must fire a simple event named invalid that is cancelable (but in this case has no default action) at the element and return false.
boolean
reportValidity()
When the reportValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must: fire a simple event named invalid that is cancelable at the element, and if that event is not canceled, report the problems with the constraints of that element to the user; then, return false.
void
setCustomValidity(DOMString error)
The setCustomValidity(message), when invoked, must set the custom validity error message to the value of the given message argument.




_HTMLFormElement

Properties
DOMString
acceptCharset
The acceptCharset IDL attribute must reflect the accept-charset content attribute.
DOMString
action
The action IDL attribute must reflect the content attribute of the same name, except that on getting, when the content attribute is missing or its value is the empty string, the document's address must be returned instead. The target IDL attribute must reflect the content attribute of the same name.
DOMString
autocomplete
The autocomplete IDL attribute must reflect the content attribute of the same name, limited to only known values.
HTMLFormControlsCollection
elements
The elements IDL attribute must return an HTMLFormControlsCollection rooted at the form element's home subtree's root element, whose filter matches listed elements whose form owner is the form element, with the exception of input elements whose type attribute is in the Image Button state, which must, for historical reasons, be excluded from this particular collection.
DOMString
encoding
The action IDL attribute must reflect the content attribute of the same name, except that on getting, when the content attribute is missing or its value is the empty string, the document's address must be returned instead. The target IDL attribute must reflect the content attribute of the same name.
DOMString
enctype
The action IDL attribute must reflect the content attribute of the same name, except that on getting, when the content attribute is missing or its value is the empty string, the document's address must be returned instead. The target IDL attribute must reflect the content attribute of the same name.
long
length
The length IDL attribute must return the number of nodes represented by the elements collection.
DOMString
method
The action IDL attribute must reflect the content attribute of the same name, except that on getting, when the content attribute is missing or its value is the empty string, the document's address must be returned instead. The target IDL attribute must reflect the content attribute of the same name.
DOMString
name
The name IDL attribute must reflect the content attribute of the same name.
boolean
noValidate
The action IDL attribute must reflect the content attribute of the same name, except that on getting, when the content attribute is missing or its value is the empty string, the document's address must be returned instead. The target IDL attribute must reflect the content attribute of the same name.
DOMString
target
The action IDL attribute must reflect the content attribute of the same name, except that on getting, when the content attribute is missing or its value is the empty string, the document's address must be returned instead. The target IDL attribute must reflect the content attribute of the same name.
Operations
boolean
checkValidity()
If the checkValidity() method is invoked, the user agent must statically validate the constraints of the form element, and return true if the constraint validation return a positive result, and false if it returned a negative result.
Element
getter(any index_name)
When a form element is indexed for indexed property retrieval, the user agent must return the value returned by the item method on the elements collection, when invoked with the given index as its argument.
boolean
reportValidity()
If the reportValidity() method is invoked, the user agent must interactively validate the constraints of the form element, and return true if the constraint validation return a positive result, and false if it returned a negative result.
void	requestAutocomplete()
void	reset()
void
submit()
The submit() method, when invoked, must submit the form element from the form element itself, with the submitted from submit() method flag set.




_HTMLHeadElement




_HTMLHeadingElement




_HTMLHRElement



_HTMLHtmlElement



_HTMLIFrameElement

boolean
allowFullscreen
The allowFullscreen IDL attribute must reflect the allowfullscreen content attribute.
Document?
contentDocument
The contentDocument IDL attribute must return the Document object of the active document of the iframe element's nested browsing context, if any and if its effective script origin is the same origin as the effective script origin specified by the incumbent settings object, or null otherwise.
WindowProxy?
contentWindow
The contentWindow IDL attribute must return the WindowProxy object of the iframe element's nested browsing context, if any, or null otherwise.
DOMString
height
The width and height IDL attributes on the iframe, embed, object, and video elements must reflect the respective content attributes of the same name.
DOMString
name
The IDL attributes src, srcdoc, name, sandbox, and seamless must reflect the respective content attributes of the same name.
DOMSettableTokenList
sandbox
The IDL attributes src, srcdoc, name, sandbox, and seamless must reflect the respective content attributes of the same name.
boolean
seamless
The IDL attributes src, srcdoc, name, sandbox, and seamless must reflect the respective content attributes of the same name.
DOMString
src
The IDL attributes src, srcdoc, name, sandbox, and seamless must reflect the respective content attributes of the same name.
DOMString
srcdoc
The IDL attributes src, srcdoc, name, sandbox, and seamless must reflect the respective content attributes of the same name.
DOMString
width
The width and height IDL attributes on the iframe, embed, object, and video elements must reflect the respective content attributes of the same name.





_HTMLImageElement


Properties
DOMString
alt
The alt, src, and srcset IDL attributes must reflect the respective content attributes of the same name.
boolean	complete
DOMString
crossOrigin
The crossOrigin IDL attribute must reflect the crossorigin content attribute, limited to only known values.
unsigned long
height
The IDL attributes width and height must return the rendered width and height of the image, in CSS pixels, if the image is being rendered, and is being rendered to a visual medium; or else the intrinsic width and height of the image, in CSS pixels, if the image is available but not being rendered to a visual medium; or else 0, if the image is not available.
boolean
isMap
The isMap IDL attribute must reflect the ismap content attribute.
unsigned long
naturalHeight
The IDL attributes naturalWidth and naturalHeight must return the intrinsic width and height of the image, in CSS pixels, if the image is available, or else 0. [CSS]
unsigned long
naturalWidth
The IDL attributes naturalWidth and naturalHeight must return the intrinsic width and height of the image, in CSS pixels, if the image is available, or else 0. [CSS]
DOMString
src
The alt, src, and srcset IDL attributes must reflect the respective content attributes of the same name.
DOMString
srcset
The alt, src, and srcset IDL attributes must reflect the respective content attributes of the same name.
DOMString
useMap
The useMap IDL attribute must reflect the usemap content attribute.
unsigned long
width
The IDL attributes width and height must return the rendered width and height of the image, in CSS pixels, if the image is being rendered, and is being rendered to a visual medium; or else the intrinsic width and height of the image, in CSS pixels, if the image is available but not being rendered to a visual medium; or else 0, if the image is not available.






_HTMLInputElement

Properties
DOMString
accept
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
DOMString
alt
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
DOMString
autocomplete
The autocomplete IDL attribute, on getting, must return the element's IDL-exposed autofill value, and on setting, must reflect the content attribute of the same name.
boolean
autofocus
The autofocus IDL attribute must reflect the content attribute of the same name.
boolean	checked
boolean
defaultChecked
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
DOMString
defaultValue
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
DOMString
dirName
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
boolean
disabled
The disabled IDL attribute must reflect the disabled content attribute.
FileList?	files
HTMLFormElement?
form
Reassociateable form-associated elements have a form IDL attribute, which, on getting, must return the element's form owner, or null if there isn't one.
DOMString
formAction
The action IDL attribute must reflect the content attribute of the same name, except that on getting, when the content attribute is missing or its value is the empty string, the document's address must be returned instead. The target IDL attribute must reflect the content attribute of the same name.
DOMString
formEnctype
The action IDL attribute must reflect the content attribute of the same name, except that on getting, when the content attribute is missing or its value is the empty string, the document's address must be returned instead. The target IDL attribute must reflect the content attribute of the same name.
DOMString
formMethod
The action IDL attribute must reflect the content attribute of the same name, except that on getting, when the content attribute is missing or its value is the empty string, the document's address must be returned instead. The target IDL attribute must reflect the content attribute of the same name.
boolean
formNoValidate
The action IDL attribute must reflect the content attribute of the same name, except that on getting, when the content attribute is missing or its value is the empty string, the document's address must be returned instead. The target IDL attribute must reflect the content attribute of the same name.
DOMString
formTarget
The action IDL attribute must reflect the content attribute of the same name, except that on getting, when the content attribute is missing or its value is the empty string, the document's address must be returned instead. The target IDL attribute must reflect the content attribute of the same name.
unsigned long
height
The IDL attributes width and height must return the rendered width and height of the image, in CSS pixels, if an image is being rendered, and is being rendered to a visual medium; or else the intrinsic width and height of the image, in CSS pixels, if an image is available but not being rendered to a visual medium; or else 0, if no image is available.
boolean
indeterminate
The indeterminate IDL attribute must initially be set to false. On getting, it must return the last value it was set to. On setting, it must be set to the new value. It has no effect except for changing the appearance of checkbox controls.
DOMString
inputMode
The type IDL attribute must reflect the respective content attribute of the same name, limited to only known values. The inputMode IDL attribute must reflect the inputmode content attribute, limited to only known values. The maxLength IDL attribute must reflect the maxlength content attribute, limited to only non-negative numbers.
NodeList
labels
Labelable elements have a NodeList object associated with them that represents the list of label elements, in tree order, whose labeled control is the element in question. The labels IDL attribute of labelable elements, on getting, must return that NodeList object.
HTMLElement?	list
DOMString
max
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
long
maxLength
The type IDL attribute must reflect the respective content attribute of the same name, limited to only known values. The inputMode IDL attribute must reflect the inputmode content attribute, limited to only known values. The maxLength IDL attribute must reflect the maxlength content attribute, limited to only non-negative numbers.
DOMString
min
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
long
minLength
The type IDL attribute must reflect the respective content attribute of the same name, limited to only known values. The inputMode IDL attribute must reflect the inputmode content attribute, limited to only known values. The maxLength IDL attribute must reflect the maxlength content attribute, limited to only non-negative numbers.
boolean
multiple
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
DOMString
name
The name IDL attribute must reflect the name content attribute.
DOMString
pattern
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
DOMString
placeholder
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
boolean
readOnly
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
boolean
required
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
DOMString
selectionDirection
The selectionDirection attribute must, on getting, return the string corresponding to the current selection direction: if the direction is forward, "forward"; if the direction is backward, "backward"; and otherwise, "none".
unsigned long
selectionEnd
The selectionEnd attribute must, on getting, return the offset (in logical order) to the character that immediately follows the end of the selection. If there is no selection, then it must return the offset (in logical order) to the character that immediately follows the text entry cursor.
unsigned long
selectionStart
The selectionStart attribute must, on getting, return the offset (in logical order) to the character that immediately follows the start of the selection. If there is no selection, then it must return the offset (in logical order) to the character that immediately follows the text entry cursor.
unsigned long
size
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
DOMString
src
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
DOMString
step
The accept, alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must reflect the respective content attributes of the same name. The dirName IDL attribute must reflect the dirname content attribute. The readOnly IDL attribute must reflect the readonly content attribute.
DOMString
type
The type IDL attribute must reflect the respective content attribute of the same name, limited to only known values. The inputMode IDL attribute must reflect the inputmode content attribute, limited to only known values. The maxLength IDL attribute must reflect the maxlength content attribute, limited to only non-negative numbers.
DOMString
validationMessage
The validationMessage attribute must return the empty string if the element is not a candidate for constraint validation or if it is one but it satisfies its constraints; otherwise, it must return a suitably localized message that the user agent would show the user if this were the only form control with a validity constraint problem.
ValidityState
validity
The validity attribute must return a ValidityState object that represents the validity states of the element. This object is live, and the same object must be returned each time the element's validity attribute is retrieved.
DOMString	value
Date?	valueAsDate
unrestricted double	valueAsNumber
double	valueHigh
double	valueLow
unsigned long
width
The IDL attributes width and height must return the rendered width and height of the image, in CSS pixels, if an image is being rendered, and is being rendered to a visual medium; or else the intrinsic width and height of the image, in CSS pixels, if an image is available but not being rendered to a visual medium; or else 0, if no image is available.
boolean
willValidate
The willValidate attribute must return true if an element is a candidate for constraint validation, and false otherwise (i.e. false if any conditions are barring it from constraint validation).
Operations
boolean
checkValidity()
When the checkValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must fire a simple event named invalid that is cancelable (but in this case has no default action) at the element and return false.
boolean
reportValidity()
When the reportValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must: fire a simple event named invalid that is cancelable at the element, and if that event is not canceled, report the problems with the constraints of that element to the user; then, return false.
void
select()
The select() method must cause the contents of the text field to be fully selected, with the selection direction being none, if the platform support selections with the direction none, or otherwise forward. The user agent must then queue a task to fire a simple event that bubbles named select at the element, using the user interaction task source as the task source.
void
setCustomValidity(DOMString error)
The setCustomValidity(message), when invoked, must set the custom validity error message to the value of the given message argument.
void	setRangeText(DOMString replacement, optional unsigned long start, optional unsigned long end, optional SelectionMode selectionMode)
void
setSelectionRange(unsigned long start, unsigned long end, optional DOMString direction)
The setSelectionRange(start, end, direction) method must set the selection of the text field to the sequence of characters starting with the character at the startth position (in logical order) and ending with the character at the (end-1)th position. Arguments greater than the length of the value of the text field must be treated as pointing at the end of the text field.
void	stepDown(optional long n)
void	stepUp(optional long n)




_HTMLKeygenElement

Properties
boolean
autofocus
The autofocus IDL attribute must reflect the content attribute of the same name.
DOMString
challenge
The challenge IDL attribute must reflect the content attribute of the same name.
boolean
disabled
The disabled IDL attribute must reflect the disabled content attribute.
HTMLFormElement?
form
Reassociateable form-associated elements have a form IDL attribute, which, on getting, must return the element's form owner, or null if there isn't one.
DOMString
keytype
The keytype IDL attribute must reflect the content attribute of the same name, limited to only known values.
NodeList
labels
Labelable elements have a NodeList object associated with them that represents the list of label elements, in tree order, whose labeled control is the element in question. The labels IDL attribute of labelable elements, on getting, must return that NodeList object.
DOMString
name
The name IDL attribute must reflect the name content attribute.
DOMString
type
The type IDL attribute must return the value "keygen".
DOMString
validationMessage
The validationMessage attribute must return the empty string if the element is not a candidate for constraint validation or if it is one but it satisfies its constraints; otherwise, it must return a suitably localized message that the user agent would show the user if this were the only form control with a validity constraint problem.
ValidityState
validity
The validity attribute must return a ValidityState object that represents the validity states of the element. This object is live, and the same object must be returned each time the element's validity attribute is retrieved.
boolean
willValidate
The willValidate attribute must return true if an element is a candidate for constraint validation, and false otherwise (i.e. false if any conditions are barring it from constraint validation).
Operations
boolean
checkValidity()
When the checkValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must fire a simple event named invalid that is cancelable (but in this case has no default action) at the element and return false.
boolean
reportValidity()
When the reportValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must: fire a simple event named invalid that is cancelable at the element, and if that event is not canceled, report the problems with the constraints of that element to the user; then, return false.
void
setCustomValidity(DOMString error)
The setCustomValidity(message), when invoked, must set the custom validity error message to the value of the given message argument.






_HTMLLabelElement

HTMLElement?
control
The control IDL attribute must return the label element's labeled control, if any, or null if there isn't one.
HTMLFormElement?
form
Reassociateable form-associated elements have a form IDL attribute, which, on getting, must return the element's form owner, or null if there isn't one.
DOMString
htmlFor
The htmlFor IDL attribute must reflect the for content attribute.





_HTMLLegendElement

HTMLFormElement?
form
The form IDL attribute's behavior depends on whether the legend element is in a fieldset element or not. If the legend has a fieldset element as its parent, then the form IDL attribute must return the same value as the form IDL attribute on that fieldset element.




_HTMLLIElement

long
value
The value IDL attribute must reflect the value of the value content attribute.




_HTMLLinkElement


Properties
DOMString
crossOrigin
The crossOrigin IDL attribute must reflect the crossorigin content attribute, limited to only known values.
DOMString
href
The IDL attributes href, rel, media, hreflang, type, and sizes each must reflect the respective content attributes of the same name.
DOMString
hreflang
The IDL attributes href, rel, media, hreflang, type, and sizes each must reflect the respective content attributes of the same name.
DOMString
media
The IDL attributes href, rel, media, hreflang, type, and sizes each must reflect the respective content attributes of the same name.
DOMString
rel
The IDL attributes href, rel, media, hreflang, type, and sizes each must reflect the respective content attributes of the same name.
DOMTokenList
relList
The IDL attribute relList must reflect the rel content attribute.
StyleSheet?
sheet
The sheet attribute must return the associated CSS style sheet for the node or null if there is no associated CSS style sheet.
DOMSettableTokenList
sizes
The IDL attributes href, rel, media, hreflang, type, and sizes each must reflect the respective content attributes of the same name.
DOMString
type
The IDL attributes href, rel, media, hreflang, type, and sizes each must reflect the respective content attributes of the same name.





_HTMLMapElement

HTMLCollection
areas
The areas attribute must return an HTMLCollection rooted at the map element, whose filter matches only area elements.
HTMLCollection
images
The images attribute must return an HTMLCollection rooted at the Document node, whose filter matches only img and object elements that are associated with this map element according to the image map processing model.
DOMString
name
The IDL attribute name must reflect the content attribute of the same name.




_HTMLMediaElement

Properties
const unsigned short
HAVE_CURRENT_DATA = 2
Data for the immediate current playback position is available, but either not enough data is available that the user agent could successfully advance the current playback position in the direction of playback at all without immediately reverting to the HAVE_METADATA state, or there is no more data to obtain in the direction of playback.
const unsigned short	HAVE_ENOUGH_DATA = 4
const unsigned short
HAVE_FUTURE_DATA = 3
Data for the immediate current playback position is available, as well as enough data for the user agent to advance the current playback position in the direction of playback at least a little without immediately reverting to the HAVE_METADATA state, and the text tracks are ready.
const unsigned short
HAVE_METADATA = 1
Enough of the resource has been obtained that the duration of the resource is available. In the case of a video element, the dimensions of the video are also available. The API will no longer throw an exception when seeking. No media data is available for the immediate current playback position.
const unsigned short
HAVE_NOTHING = 0
No information regarding the media resource is available. No data for the current playback position is available. Media elements whose networkState attribute are set to NETWORK_EMPTY are always in the HAVE_NOTHING state.
const unsigned short
NETWORK_EMPTY = 0
The element has not yet been initialized. All attributes are in their initial states.
const unsigned short
NETWORK_IDLE = 1
The element's resource selection algorithm is active and has selected a resource, but it is not actually using the network at this time.
const unsigned short
NETWORK_LOADING = 2
The user agent is actively trying to download data.
const unsigned short
NETWORK_NO_SOURCE = 3
The element's resource selection algorithm is active, but it has not yet found a resource to use.
AudioTrackList
audioTracks
The audioTracks attribute of a media element must return a live AudioTrackList object representing the audio tracks available in the media element's media resource. The same object must be returned each time.
boolean
autoplay
The autoplay IDL attribute must reflect the content attribute of the same name.
TimeRanges
buffered
The buffered attribute must return a new static normalized TimeRanges object that represents the ranges of the media resource, if any, that the user agent has buffered, at the time the attribute is evaluated. Users agents must accurately determine the ranges available, even for media streams where this can only be determined by tedious inspection.
MediaController?
controller
The controller attribute on a media element, on getting, must return the element's current media controller, if any, or null otherwise.
boolean
controls
The controls IDL attribute must reflect the content attribute of the same name.
DOMString
crossOrigin
The crossOrigin IDL attribute must reflect the crossorigin content attribute, limited to only known values.
DOMString
currentSrc
The currentSrc IDL attribute is initially the empty string. Its value is changed by the resource selection algorithm defined below.
double
currentTime
The currentTime attribute must, on getting, return the media element's default playback start position, unless that is zero, in which case it must return the element's official playback position. The returned value must be expressed in seconds. On setting, if the media element has a current media controller, then the user agent must throw an InvalidStateError exception; otherwise, if the media element's readyState is HAVE_NOTHING, then it must set the media element's default playback start position to the new value; otherwise, it must set the official playback position to the new value and then seek to the new value.
boolean
defaultMuted
The defaultMuted IDL attribute must reflect the muted content attribute.
double
defaultPlaybackRate
The defaultPlaybackRate attribute gives the desired speed at which the media resource is to play, as a multiple of its intrinsic speed. The attribute is mutable: on getting it must return the last value it was set to, or 1.0 if it hasn't yet been set; on setting the attribute must be set to the new value.
unrestricted double
duration
The duration attribute must return the time of the end of the media resource, in seconds, on the media timeline. If no media data is available, then the attributes must return the Not-a-Number (NaN) value. If the media resource is not known to be bounded (e.g.
boolean
ended
The ended attribute must return true if, the last time the event loop reached step 1, the media element had ended playback and the direction of playback was forwards, and false otherwise.
MediaError?
error
All media elements have an associated error status, which records the last error the element encountered since its resource selection algorithm was last invoked. The error attribute, on getting, must return the MediaError object created for this last error, or null if there has not been an error.
boolean
loop
The loop IDL attribute must reflect the content attribute of the same name.
DOMString
mediaGroup
The mediaGroup IDL attribute on media elements must reflect the mediagroup content attribute.
boolean
muted
The muted IDL attribute must return the value to which it was last set. When a media element is created, if the element has a muted content attribute specified, then the muted IDL attribute should be set to true; otherwise, the user agents may set the value to the user's preferred value (e.g.
unsigned short
networkState
As media elements interact with the network, their current network activity is represented by the networkState attribute.
boolean
paused
The paused attribute represents whether the media element is paused or not. The attribute must initially be true.
double
playbackRate
The playbackRate attribute gives the effective playback rate (assuming there is no current media controller overriding it), which is the speed at which the media resource plays, as a multiple of its intrinsic speed. If it is not equal to the defaultPlaybackRate, then the implication is that the user is using a feature such as fast forward or slow motion playback.
TimeRanges
played
The played attribute must return a new static normalized TimeRanges object that represents the ranges of points on the media timeline of the media resource reached through the usual monotonic increase of the current playback position during normal playback, if any, at the time the attribute is evaluated.
DOMString
preload
The preload IDL attribute must reflect the content attribute of the same name, limited to only known values.
unsigned short
readyState
The readyState IDL attribute must, on getting, return the value described above that describes the current ready state of the media element.
TimeRanges
seekable
The seekable attribute must return a new static normalized TimeRanges object that represents the ranges of the media resource, if any, that the user agent is able to seek to, at the time the attribute is evaluated.
boolean
seeking
The seeking attribute must initially have the value false.
DOMString
src
The src IDL attribute on media elements must reflect the content attribute of the same name.
TextTrackList
textTracks
The textTracks attribute of media elements must return a TextTrackList object representing the TextTrack objects of the text tracks in the media element's list of text tracks, in the same order as in the list of text tracks. The same object must be returned each time the attribute is accessed.
VideoTrackList
videoTracks
The videoTracks attribute of a media element must return a live VideoTrackList object representing the video tracks available in the media element's media resource. The same object must be returned each time.
double
volume
The volume IDL attribute must return the playback volume of any audio portions of the media element. On setting, if the new value is in the range 0.0 to 1.0 inclusive, the media element's playback volume must be set to the new value. If the new value is outside the range 0.0 to 1.0 inclusive, then, on setting, an IndexSizeError exception must be thrown instead.
Operations
TextTrack	addTextTrack(TextTrackKind kind, optional DOMString label, optional DOMString language)
CanPlayTypeResult
canPlayType(DOMString type)
The canPlayType(type) method must return the empty string if type is a type that the user agent knows it cannot render or is the type "application/octet-stream"; it must return "probably" if the user agent is confident that the type represents a media resource that it can render if used in with this audio or video element; and it must return "maybe" otherwise.
void
fastSeek(double time)
The fastSeek() method must seek to the time given by the method's argument, with the approximate-for-speed flag set.
Date
getStartDate()
The getStartDate() method must return a new Date object representing the current timeline offset.
void
load()
When the load() method on a media element is invoked, the user agent must run the media element load algorithm.
void	pause()
void
play()
When the play() method on a media element is invoked, the user agent must run the following steps.





_HTMLMenuElement

DOMString
label
The label IDL attribute must reflect the content attribute of the same name.
DOMString
type
The type IDL attribute must reflect the content attribute of the same name, limited to only known values.




_HTMLMenuItemElement


Properties
boolean
checked
The label, icon, disabled, checked, and radiogroup, and default IDL attributes must reflect the respective content attributes of the same name.
HTMLElement?
command
The command IDL attribute must return the master command, if any, or null otherwise.
boolean
default
The label, icon, disabled, checked, and radiogroup, and default IDL attributes must reflect the respective content attributes of the same name.
boolean
disabled
The label, icon, disabled, checked, and radiogroup, and default IDL attributes must reflect the respective content attributes of the same name.
DOMString
icon
The label, icon, disabled, checked, and radiogroup, and default IDL attributes must reflect the respective content attributes of the same name.
DOMString
label
The label, icon, disabled, checked, and radiogroup, and default IDL attributes must reflect the respective content attributes of the same name.
DOMString
radiogroup
The label, icon, disabled, checked, and radiogroup, and default IDL attributes must reflect the respective content attributes of the same name.
DOMString
type
The type IDL attribute must reflect the content attribute of the same name, limited to only known values.






_HTMLMetaElement

DOMString
content
The name and content IDL attributes must reflect the respective content attributes of the same name. The IDL attribute httpEquiv must reflect the content attribute http-equiv.
DOMString
httpEquiv
The name and content IDL attributes must reflect the respective content attributes of the same name. The IDL attribute httpEquiv must reflect the content attribute http-equiv.
DOMString
name
The name and content IDL attributes must reflect the respective content attributes of the same name. The IDL attribute httpEquiv must reflect the content attribute http-equiv.



_HTMLMeterElement

double
high
The high IDL attribute, on getting, must return the high boundary. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the high content attribute must be set to that string.
NodeList
labels
Labelable elements have a NodeList object associated with them that represents the list of label elements, in tree order, whose labeled control is the element in question. The labels IDL attribute of labelable elements, on getting, must return that NodeList object.
double
low
The low IDL attribute, on getting, must return the low boundary. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the low content attribute must be set to that string.
double
max
The max IDL attribute, on getting, must return the maximum value. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the max content attribute must be set to that string.
double
min
The min IDL attribute, on getting, must return the minimum value. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the min content attribute must be set to that string.
double
optimum
The optimum IDL attribute, on getting, must return the optimum value. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the optimum content attribute must be set to that string.
double
value
The value IDL attribute, on getting, must return the actual value. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the value content attribute must be set to that string.




_HTMLModElement


Properties
DOMString
cite
The cite IDL attribute must reflect the element's cite content attribute. The dateTime IDL attribute must reflect the element's datetime content attribute.
DOMString
dateTime
The cite IDL attribute must reflect the element's cite content attribute. The dateTime IDL attribute must reflect the element's datetime content attribute.





_HTMLObjectElement

Properties
Document?
contentDocument
The contentDocument IDL attribute must return the Document object of the active document of the object element's nested browsing context, if any and if its effective script origin is the same origin as the effective script origin specified by the incumbent settings object, or null otherwise.
WindowProxy?
contentWindow
The contentWindow IDL attribute must return the WindowProxy object of the object element's nested browsing context, if it has one; otherwise, it must return null.
DOMString
data
The IDL attributes data, type and name each must reflect the respective content attributes of the same name. The typeMustMatch IDL attribute must reflect the typemustmatch content attribute. The useMap IDL attribute must reflect the usemap content attribute.
HTMLFormElement?
form
Reassociateable form-associated elements have a form IDL attribute, which, on getting, must return the element's form owner, or null if there isn't one.
DOMString
height
The width and height IDL attributes on the iframe, embed, object, and video elements must reflect the respective content attributes of the same name.
DOMString
name
The IDL attributes data, type and name each must reflect the respective content attributes of the same name. The typeMustMatch IDL attribute must reflect the typemustmatch content attribute. The useMap IDL attribute must reflect the usemap content attribute.
DOMString
type
The IDL attributes data, type and name each must reflect the respective content attributes of the same name. The typeMustMatch IDL attribute must reflect the typemustmatch content attribute. The useMap IDL attribute must reflect the usemap content attribute.
boolean
typeMustMatch
The IDL attributes data, type and name each must reflect the respective content attributes of the same name. The typeMustMatch IDL attribute must reflect the typemustmatch content attribute. The useMap IDL attribute must reflect the usemap content attribute.
DOMString
useMap
The IDL attributes data, type and name each must reflect the respective content attributes of the same name. The typeMustMatch IDL attribute must reflect the typemustmatch content attribute. The useMap IDL attribute must reflect the usemap content attribute.
DOMString
validationMessage
The validationMessage attribute must return the empty string if the element is not a candidate for constraint validation or if it is one but it satisfies its constraints; otherwise, it must return a suitably localized message that the user agent would show the user if this were the only form control with a validity constraint problem.
ValidityState
validity
The validity attribute must return a ValidityState object that represents the validity states of the element. This object is live, and the same object must be returned each time the element's validity attribute is retrieved.
DOMString
width
The width and height IDL attributes on the iframe, embed, object, and video elements must reflect the respective content attributes of the same name.
boolean
willValidate
The willValidate attribute must return true if an element is a candidate for constraint validation, and false otherwise (i.e. false if any conditions are barring it from constraint validation).
Operations
boolean
checkValidity()
When the checkValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must fire a simple event named invalid that is cancelable (but in this case has no default action) at the element and return false.
any
legacycaller(any arguments...)
All object elements have a legacy caller operation. If the object element has an instantiated plugin that supports a scriptable interface that defines a legacy caller operation, then that must be the behavior of the object's legacy caller operation. Otherwise, the object's legacy caller operation must be to throw a NotSupportedError exception.
boolean
reportValidity()
When the reportValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must: fire a simple event named invalid that is cancelable at the element, and if that event is not canceled, report the problems with the constraints of that element to the user; then, return false.
void
setCustomValidity(DOMString error)
The setCustomValidity(message), when invoked, must set the custom validity error message to the value of the given message argument.





_HTMLOListElement

boolean
reversed
The reversed, start, and type IDL attributes must reflect the respective content attributes of the same name. The start IDL attribute has the same default as its content attribute.
long
start
The reversed, start, and type IDL attributes must reflect the respective content attributes of the same name. The start IDL attribute has the same default as its content attribute.
DOMString
type
The reversed, start, and type IDL attributes must reflect the respective content attributes of the same name. The start IDL attribute has the same default as its content attribute.




_HTMLOptGroupElement

boolean
disabled
The disabled and label attributes must reflect the respective content attributes of the same name.
DOMString
label
The disabled and label attributes must reflect the respective content attributes of the same name.




_HTMLOptionElement

Properties
boolean
defaultSelected
The disabled IDL attribute must reflect the content attribute of the same name. The defaultSelected IDL attribute must reflect the selected content attribute.
boolean
disabled
The disabled IDL attribute must reflect the content attribute of the same name. The defaultSelected IDL attribute must reflect the selected content attribute.
HTMLFormElement?
form
The form IDL attribute's behavior depends on whether the option element is in a select element or not. If the option has a select element as its parent, or has an optgroup element as its parent and that optgroup element has a select element as its parent, then the form IDL attribute must return the same value as the form IDL attribute on that select element.
long
index
The index IDL attribute must return the element's index.
DOMString
label
The label IDL attribute, on getting, must return the element's label. On setting, the element's label content attribute must be set to the new value.
boolean
selected
The selected IDL attribute, on getting, must return true if the element's selectedness is true, and false otherwise. On setting, it must set the element's selectedness to the new value, set its dirtiness to true, and then cause the element to ask for a reset.
DOMString
text
The text IDL attribute, on getting, must return the result of stripping and collapsing whitespace from the concatenation of data of all the Text node descendants of the option element, in tree order, excluding any that are descendants of descendants of the option element that are themselves script elements in the HTML namespace or script elements in the SVG namespace.
DOMString
value
The value IDL attribute, on getting, must return the element's value. On setting, the element's value content attribute must be set to the new value.





_HTMLOutputElement

Properties
DOMString
defaultValue
The defaultValue IDL attribute, on getting, must return the element's default value. On setting, the attribute must set the element's default value, and, if the element's value mode flag is in the mode default, set the element's textContent IDL attribute as well.
HTMLFormElement?
form
Reassociateable form-associated elements have a form IDL attribute, which, on getting, must return the element's form owner, or null if there isn't one.
DOMSettableTokenList
htmlFor
The htmlFor IDL attribute must reflect the for content attribute.
NodeList
labels
Labelable elements have a NodeList object associated with them that represents the list of label elements, in tree order, whose labeled control is the element in question. The labels IDL attribute of labelable elements, on getting, must return that NodeList object.
DOMString
name
The name IDL attribute must reflect the name content attribute.
DOMString
type
The type attribute must return the string "output".
DOMString
validationMessage
The validationMessage attribute must return the empty string if the element is not a candidate for constraint validation or if it is one but it satisfies its constraints; otherwise, it must return a suitably localized message that the user agent would show the user if this were the only form control with a validity constraint problem.
ValidityState
validity
The validity attribute must return a ValidityState object that represents the validity states of the element. This object is live, and the same object must be returned each time the element's validity attribute is retrieved.
DOMString
value
The value IDL attribute must act like the element's textContent IDL attribute, except that on setting, in addition, before the child nodes are changed, the element's value mode flag must be set to value.
boolean
willValidate
The willValidate attribute must return true if an element is a candidate for constraint validation, and false otherwise (i.e. false if any conditions are barring it from constraint validation).
Operations
boolean
checkValidity()
When the checkValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must fire a simple event named invalid that is cancelable (but in this case has no default action) at the element and return false.
boolean
reportValidity()
When the reportValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must: fire a simple event named invalid that is cancelable at the element, and if that event is not canceled, report the problems with the constraints of that element to the user; then, return false.
void
setCustomValidity(DOMString error)
The setCustomValidity(message), when invoked, must set the custom validity error message to the value of the given message argument.





_HTMLParagraphElement





_HTMLParamElement

DOMString
name
The IDL attributes name and value must both reflect the respective content attributes of the same name.
DOMString
value
The IDL attributes name and value must both reflect the respective content attributes of the same name.



_HTMLPreElement




_HTMLProgressElement

NodeList
labels
Labelable elements have a NodeList object associated with them that represents the list of label elements, in tree order, whose labeled control is the element in question. The labels IDL attribute of labelable elements, on getting, must return that NodeList object.
double
max
The max IDL attribute must reflect the content attribute of the same name, limited to numbers greater than zero. The default value for max is 1.0.
double
position
If the progress bar is an indeterminate progress bar, then the position IDL attribute must return −1. Otherwise, it must return the result of dividing the current value by the maximum value.
double
value
If the progress bar is an indeterminate progress bar, then the value IDL attribute, on getting, must return 0. Otherwise, it must return the current value. On setting, the given value must be converted to the best representation of the number as a floating-point number and then the value content attribute must be set to that string.




_HTMLQuoteElement

DOMString
cite
The cite IDL attribute must reflect the element's cite content attribute.




_HTMLScriptElement

boolean
async
The async IDL attribute controls whether the element will execute asynchronously or not. If the element's "force-async" flag is set, then, on getting, the async IDL attribute must return true, and on setting, the "force-async" flag must first be unset, and then the content attribute must be removed if the IDL attribute's new value is false, and must be set to the empty string if the IDL attribute's new value is true.
DOMString
charset
The IDL attributes src, type, charset, defer, each must reflect the respective content attributes of the same name.
DOMString
crossOrigin
The crossOrigin IDL attribute must reflect the crossorigin content attribute, limited to only known values.
boolean
defer
The IDL attributes src, type, charset, defer, each must reflect the respective content attributes of the same name.
DOMString
src
The IDL attributes src, type, charset, defer, each must reflect the respective content attributes of the same name.
DOMString
text
The IDL attribute text must return a concatenation of the contents of all the Text nodes that are children of the script element (ignoring any other nodes such as comments or elements), in tree order. On setting, it must act the same way as the textContent IDL attribute.
DOMString
type
The IDL attributes src, type, charset, defer, each must reflect the respective content attributes of the same name.





_HTMLSelectElement

Properties
boolean
autofocus
The autofocus IDL attribute must reflect the content attribute of the same name.
boolean
disabled
The disabled IDL attribute must reflect the disabled content attribute.
HTMLFormElement?
form
Reassociateable form-associated elements have a form IDL attribute, which, on getting, must return the element's form owner, or null if there isn't one.
NodeList
labels
Labelable elements have a NodeList object associated with them that represents the list of label elements, in tree order, whose labeled control is the element in question. The labels IDL attribute of labelable elements, on getting, must return that NodeList object.
unsigned long
length
The length IDL attribute must return the number of nodes represented by the options collection. On setting, it must act like the attribute of the same name on the options collection.
boolean
multiple
The multiple, required, and size IDL attributes must reflect the respective content attributes of the same name. The size IDL attribute has a default value of zero.
DOMString
name
The name IDL attribute must reflect the name content attribute.
HTMLOptionsCollection
options
The options IDL attribute must return an HTMLOptionsCollection rooted at the select node, whose filter matches the elements in the list of options.
boolean
required
The multiple, required, and size IDL attributes must reflect the respective content attributes of the same name. The size IDL attribute has a default value of zero.
long
selectedIndex
The selectedIndex IDL attribute, on getting, must return the index of the first option element in the list of options in tree order that has its selectedness set to true, if any. If there isn't one, then it must return −1.
HTMLCollection
selectedOptions
The selectedOptions IDL attribute must return an HTMLCollection rooted at the select node, whose filter matches the elements in the list of options that have their selectedness set to true.
unsigned long
size
The multiple, required, and size IDL attributes must reflect the respective content attributes of the same name. The size IDL attribute has a default value of zero.
DOMString
type
The type IDL attribute, on getting, must return the string "select-one" if the multiple attribute is absent, and the string "select-multiple" if the multiple attribute is present.
DOMString
validationMessage
The validationMessage attribute must return the empty string if the element is not a candidate for constraint validation or if it is one but it satisfies its constraints; otherwise, it must return a suitably localized message that the user agent would show the user if this were the only form control with a validity constraint problem.
ValidityState
validity
The validity attribute must return a ValidityState object that represents the validity states of the element. This object is live, and the same object must be returned each time the element's validity attribute is retrieved.
DOMString
value
The value IDL attribute, on getting, must return the value of the first option element in the list of options in tree order that has its selectedness set to true, if any. If there isn't one, then it must return the empty string.
boolean
willValidate
The willValidate attribute must return true if an element is a candidate for constraint validation, and false otherwise (i.e. false if any conditions are barring it from constraint validation).
Operations
void
add((HTMLOptionElement or HTMLOptGroupElement) element, optional (HTMLElement or long) before)
Similarly, the add() method must act like its namesake method on that same options collection.
boolean
checkValidity()
When the checkValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must fire a simple event named invalid that is cancelable (but in this case has no default action) at the element and return false.
Element?
item(unsigned long index)
The item(index) method must return the value returned by the method of the same name on the options collection, when invoked with the same argument.
HTMLOptionElement?
namedItem(DOMString name)
The namedItem(name) method must return the value returned by the method of the same name on the options collection, when invoked with the same argument.
void
remove(optional long index)
The remove() method must act like its namesake method on that same options collection when it has arguments, and like its namesake method on the ChildNode interface implemented by the HTMLSelectElement ancestor interface Element when it has no arguments.
boolean
reportValidity()
When the reportValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must: fire a simple event named invalid that is cancelable at the element, and if that event is not canceled, report the problems with the constraints of that element to the user; then, return false.
void
setCustomValidity(DOMString error)
The setCustomValidity(message), when invoked, must set the custom validity error message to the value of the given message argument.
void	setter creator(unsigned long index, HTMLOptionElement? option)






_HTMLShadowElement

ShadowRoot?
olderShadowRoot
Represents the shadow tree that is rendered in place of this shadow insertion point
boolean
resetStyleInheritance
Must reflect the resetstyleinheritance attribute.






_HTMLSourceElement

DOMString
src
The IDL attributes src and type must reflect the respective content attributes of the same name.
DOMString
type
The IDL attributes src and type must reflect the respective content attributes of the same name.





_HTMLSpanElement



_HTMLStyleElement

DOMString
media
The media, type and scoped IDL attributes must reflect the respective content attributes of the same name.
boolean
scoped
The media, type and scoped IDL attributes must reflect the respective content attributes of the same name.
StyleSheet?
sheet
The sheet attribute must return the associated CSS style sheet for the node or null if there is no associated CSS style sheet.
DOMString
type
The media, type and scoped IDL attributes must reflect the respective content attributes of the same name.




_HTMLTableCaptionElement





_HTMLTableCellElement

long
cellIndex
The cellIndex IDL attribute must, if the element has a parent tr element, return the index of the cell's element in the parent element's cells collection. If there is no such parent element, then the attribute must return −1.
unsigned long
colSpan
The colSpan IDL attribute must reflect the colspan content attribute. Its default value is 1.
DOMSettableTokenList
headers
The headers IDL attribute must reflect the content attribute of the same name.
unsigned long
rowSpan
The rowSpan IDL attribute must reflect the rowspan content attribute. Its default value is 1.





_HTMLTableColElement

unsigned long
span
The span IDL attribute must reflect the content attribute of the same name. The value must be limited to only non-negative numbers greater than zero.





_HTMLTableDataCellElement




_HTMLTableElement

Properties
HTMLTableCaptionElement?
caption
The caption IDL attribute must return, on getting, the first caption element child of the table element, if any, or null otherwise. On setting, the first caption element child of the table element, if any, must be removed, and the new value, if not null, must be inserted as the first node of the table element.
HTMLCollection
rows
The rows attribute must return an HTMLCollection rooted at the table node, whose filter matches only tr elements that are either children of the table element, or children of thead, tbody, or tfoot elements that are themselves children of the table element.
boolean
sortable
The IDL attribute sortable must reflect the sortable content attribute.
HTMLCollection
tBodies
The tBodies attribute must return an HTMLCollection rooted at the table node, whose filter matches only tbody elements that are children of the table element.
HTMLTableSectionElement?
tFoot
The tFoot IDL attribute must return, on getting, the first tfoot element child of the table element, if any, or null otherwise. On setting, if the new value is null or a tfoot element, the first tfoot element child of the table element, if any, must be removed, and the new value, if not null, must be inserted immediately before the first element in the table element that is neither a caption element, a colgroup element, nor a thead element, if any, or at the end of the table if there are no such elements.
HTMLTableSectionElement?
tHead
The tHead IDL attribute must return, on getting, the first thead element child of the table element, if any, or null otherwise. On setting, if the new value is null or a thead element, the first thead element child of the table element, if any, must be removed, and the new value, if not null, must be inserted immediately before the first element in the table element that is neither a caption element nor a colgroup element, if any, or at the end of the table if there are no such elements.
Operations
HTMLElement
createCaption()
The createCaption() method must return the first caption element child of the table element, if any; otherwise a new caption element must be created, inserted as the first node of the table element, and then returned.
HTMLElement
createTBody()
The createTBody() method must create a new tbody element, insert it immediately after the last tbody element child in the table element, if any, or at the end of the table element if the table element has no tbody element children, and then must return the new tbody element.
HTMLElement
createTFoot()
The createTFoot() method must return the first tfoot element child of the table element, if any; otherwise a new tfoot element must be created and inserted immediately before the first element in the table element that is neither a caption element, a colgroup element, nor a thead element, if any, or at the end of the table if there are no such elements, and then that new element must be returned.
HTMLElement
createTHead()
The createTHead() method must return the first thead element child of the table element, if any; otherwise a new thead element must be created and inserted immediately before the first element in the table element that is neither a caption element nor a colgroup element, if any, or at the end of the table if there are no such elements, and then that new element must be returned.
void
deleteCaption()
The deleteCaption() method must remove the first caption element child of the table element, if any.
void	deleteRow(long index)
void
deleteTFoot()
The deleteTFoot() method must remove the first tfoot element child of the table element, if any.
void
deleteTHead()
The deleteTHead() method must remove the first thead element child of the table element, if any.
HTMLElement
insertRow(optional long index)
The behavior of the insertRow(index) method depends on the state of the table.
void
stopSorting()
The table element's stopSorting() method, when invoked, must remove the sorted attribute of all the sorting-enabled th elements of the table element on which the method was invoked.





_HTMLTableHeaderCellElement

DOMString
abbr
The abbr and sorted IDL attributes must reflect the content attributes of the same name.
DOMString
scope
The scope IDL attribute must reflect the content attribute of the same name, limited to only known values.
DOMString
sorted
The abbr and sorted IDL attributes must reflect the content attributes of the same name.






_HTMLTableRowElement

HTMLCollection
cells
The cells attribute must return an HTMLCollection rooted at the tr element, whose filter matches only td and th elements that are children of the tr element.
long
rowIndex
The rowIndex attribute must, if the element has a parent table element, or a parent tbody, thead, or tfoot element and a grandparent table element, return the index of the tr element in that table element's rows collection. If there is no such table element, then the attribute must return −1.
long
sectionRowIndex
The sectionRowIndex attribute must, if the element has a parent table, tbody, thead, or tfoot element, return the index of the tr element in the parent element's rows collection (for tables, that's the HTMLTableElement.rows collection; for table sections, that's the HTMLTableRowElement.rows collection).
Operations
void
deleteCell(long index)
The deleteCell(index) method must remove the indexth element in the cells collection from its parent. If index is less than zero or greater than or equal to the number of elements in the cells collection, the method must instead throw an IndexSizeError exception.
HTMLElement	insertCell(optional long index)





_HTMLTableSectionElement

Properties
HTMLCollection
rows
The rows attribute must return an HTMLCollection rooted at the element, whose filter matches only tr elements that are children of the element.
Operations
void
deleteRow(long index)
The deleteRow(index) method must remove the indexth element in the rows collection from its parent. If index is less than zero or greater than or equal to the number of elements in the rows collection, the method must instead throw an IndexSizeError exception.
HTMLElement	insertRow(optional long index)





_HTMLTemplateElement

DocumentFragment
content
The content IDL attribute must return the template element's template contents.




_HTMLTextAreaElement

Properties
DOMString
autocomplete
The autocomplete IDL attribute, on getting, must return the element's IDL-exposed autofill value, and on setting, must reflect the content attribute of the same name.
boolean
autofocus
The autofocus IDL attribute must reflect the content attribute of the same name.
unsigned long
cols
The cols, placeholder, required, rows, and wrap attributes must reflect the respective content attributes of the same name. The cols and rows attributes are limited to only non-negative numbers greater than zero. The cols attribute's default value is 20.
DOMString
defaultValue
The defaultValue IDL attribute must act like the element's textContent IDL attribute.
DOMString
dirName
The cols, placeholder, required, rows, and wrap attributes must reflect the respective content attributes of the same name. The cols and rows attributes are limited to only non-negative numbers greater than zero. The cols attribute's default value is 20.
boolean
disabled
The disabled IDL attribute must reflect the disabled content attribute.
HTMLFormElement?
form
Reassociateable form-associated elements have a form IDL attribute, which, on getting, must return the element's form owner, or null if there isn't one.
DOMString
inputMode
The cols, placeholder, required, rows, and wrap attributes must reflect the respective content attributes of the same name. The cols and rows attributes are limited to only non-negative numbers greater than zero. The cols attribute's default value is 20.
NodeList
labels
Labelable elements have a NodeList object associated with them that represents the list of label elements, in tree order, whose labeled control is the element in question. The labels IDL attribute of labelable elements, on getting, must return that NodeList object.
long
maxLength
The cols, placeholder, required, rows, and wrap attributes must reflect the respective content attributes of the same name. The cols and rows attributes are limited to only non-negative numbers greater than zero. The cols attribute's default value is 20.
long
minLength
The cols, placeholder, required, rows, and wrap attributes must reflect the respective content attributes of the same name. The cols and rows attributes are limited to only non-negative numbers greater than zero. The cols attribute's default value is 20.
DOMString
name
The name IDL attribute must reflect the name content attribute.
DOMString
placeholder
The cols, placeholder, required, rows, and wrap attributes must reflect the respective content attributes of the same name. The cols and rows attributes are limited to only non-negative numbers greater than zero. The cols attribute's default value is 20.
boolean
readOnly
The cols, placeholder, required, rows, and wrap attributes must reflect the respective content attributes of the same name. The cols and rows attributes are limited to only non-negative numbers greater than zero. The cols attribute's default value is 20.
boolean
required
The cols, placeholder, required, rows, and wrap attributes must reflect the respective content attributes of the same name. The cols and rows attributes are limited to only non-negative numbers greater than zero. The cols attribute's default value is 20.
unsigned long
rows
The cols, placeholder, required, rows, and wrap attributes must reflect the respective content attributes of the same name. The cols and rows attributes are limited to only non-negative numbers greater than zero. The cols attribute's default value is 20.
DOMString
selectionDirection
The selectionDirection attribute must, on getting, return the string corresponding to the current selection direction: if the direction is forward, "forward"; if the direction is backward, "backward"; and otherwise, "none".
unsigned long
selectionEnd
The selectionEnd attribute must, on getting, return the offset (in logical order) to the character that immediately follows the end of the selection. If there is no selection, then it must return the offset (in logical order) to the character that immediately follows the text entry cursor.
unsigned long
selectionStart
The selectionStart attribute must, on getting, return the offset (in logical order) to the character that immediately follows the start of the selection. If there is no selection, then it must return the offset (in logical order) to the character that immediately follows the text entry cursor.
unsigned long
textLength
The textLength IDL attribute must return the code-unit length of the element's API value.
DOMString
type
The type IDL attribute must return the value "textarea".
DOMString
validationMessage
The validationMessage attribute must return the empty string if the element is not a candidate for constraint validation or if it is one but it satisfies its constraints; otherwise, it must return a suitably localized message that the user agent would show the user if this were the only form control with a validity constraint problem.
ValidityState
validity
The validity attribute must return a ValidityState object that represents the validity states of the element. This object is live, and the same object must be returned each time the element's validity attribute is retrieved.
DOMString
value
The value attribute must, on getting, return the element's API value; on setting, it must set the element's raw value to the new value, set the element's dirty value flag to true, and should then move the text entry cursor position to the end of the text field, unselecting any selected text and resetting the selection direction to none.
boolean
willValidate
The willValidate attribute must return true if an element is a candidate for constraint validation, and false otherwise (i.e. false if any conditions are barring it from constraint validation).
DOMString
wrap
The cols, placeholder, required, rows, and wrap attributes must reflect the respective content attributes of the same name. The cols and rows attributes are limited to only non-negative numbers greater than zero. The cols attribute's default value is 20.
Operations
boolean
checkValidity()
When the checkValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must fire a simple event named invalid that is cancelable (but in this case has no default action) at the element and return false.
boolean
reportValidity()
When the reportValidity() method is invoked, if the element is a candidate for constraint validation and does not satisfy its constraints, the user agent must: fire a simple event named invalid that is cancelable at the element, and if that event is not canceled, report the problems with the constraints of that element to the user; then, return false.
void
select()
The select() method must cause the contents of the text field to be fully selected, with the selection direction being none, if the platform support selections with the direction none, or otherwise forward. The user agent must then queue a task to fire a simple event that bubbles named select at the element, using the user interaction task source as the task source.
void
setCustomValidity(DOMString error)
The setCustomValidity(message), when invoked, must set the custom validity error message to the value of the given message argument.
void	setRangeText(DOMString replacement, optional unsigned long start, optional unsigned long end, optional SelectionMode selectionMode)
void
setSelectionRange(unsigned long start, unsigned long end, optional DOMString direction)
The setSelectionRange(start, end, direction) method must set the selection of the text field to the sequence of characters starting with the character at the startth position (in logical order) and ending with the character at the (end-1)th position. Arguments greater than the length of the value of the text field must be treated as pointing at the end of the text field.






_HTMLTimeElement

DOMString
dateTime
The dateTime IDL attribute must reflect the element's datetime content attribute.




_HTMLTitleElement

DOMString
text
The IDL attribute text must return a concatenation of the contents of all the Text nodes that are children of the title element (ignoring any other nodes such as comments or elements), in tree order. On setting, it must act the same way as the textContent IDL attribute.




_HTMLTrackElement

const unsigned short
ERROR = 3
The text track failed to load state.
const unsigned short
LOADED = 2
The text track loaded state.
const unsigned short
LOADING = 1
The text track loading state.
const unsigned short
NONE = 0
The text track not loaded state.
boolean
default
The src, srclang, label, and default IDL attributes must reflect the respective content attributes of the same name. The kind IDL attribute must reflect the content attribute of the same name, limited to only known values.
DOMString
kind
The src, srclang, label, and default IDL attributes must reflect the respective content attributes of the same name. The kind IDL attribute must reflect the content attribute of the same name, limited to only known values.
DOMString
label
The src, srclang, label, and default IDL attributes must reflect the respective content attributes of the same name. The kind IDL attribute must reflect the content attribute of the same name, limited to only known values.
unsigned short	readyState
DOMString
src
The src, srclang, label, and default IDL attributes must reflect the respective content attributes of the same name. The kind IDL attribute must reflect the content attribute of the same name, limited to only known values.
DOMString
srclang
The src, srclang, label, and default IDL attributes must reflect the respective content attributes of the same name. The kind IDL attribute must reflect the content attribute of the same name, limited to only known values.
TextTrack
track
The track IDL attribute must, on getting, return the track element's text track's corresponding TextTrack object.





_HTMLUListElement





_HTMLUnknownElement




_HTMLVideoElement

Properties
unsigned long	height
DOMString
poster
The poster IDL attribute must reflect the poster content attribute.
unsigned long
videoHeight
The videoWidth IDL attribute must return the intrinsic width of the video in CSS pixels. The videoHeight IDL attribute must return the intrinsic height of the video in CSS pixels. If the element's readyState attribute is HAVE_NOTHING, then the attributes must return 0.
unsigned long
videoWidth
The videoWidth IDL attribute must return the intrinsic width of the video in CSS pixels. The videoHeight IDL attribute must return the intrinsic height of the video in CSS pixels. If the element's readyState attribute is HAVE_NOTHING, then the attributes must return 0.
unsigned long	width




